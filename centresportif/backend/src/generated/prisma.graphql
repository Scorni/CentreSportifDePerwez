type Actuality {
  id: ID!
  title: String!
  date: String!
  content: String!
}

type ActualityConnection {
  pageInfo: PageInfo!
  edges: [ActualityEdge]!
  aggregate: AggregateActuality!
}

input ActualityCreateInput {
  id: ID
  title: String!
  date: String!
  content: String!
}

type ActualityEdge {
  node: Actuality!
  cursor: String!
}

enum ActualityOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  date_ASC
  date_DESC
  content_ASC
  content_DESC
}

type ActualityPreviousValues {
  id: ID!
  title: String!
  date: String!
  content: String!
}

type ActualitySubscriptionPayload {
  mutation: MutationType!
  node: Actuality
  updatedFields: [String!]
  previousValues: ActualityPreviousValues
}

input ActualitySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ActualityWhereInput
  AND: [ActualitySubscriptionWhereInput!]
  OR: [ActualitySubscriptionWhereInput!]
  NOT: [ActualitySubscriptionWhereInput!]
}

input ActualityUpdateInput {
  title: String
  date: String
  content: String
}

input ActualityUpdateManyMutationInput {
  title: String
  date: String
  content: String
}

input ActualityWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  date: String
  date_not: String
  date_in: [String!]
  date_not_in: [String!]
  date_lt: String
  date_lte: String
  date_gt: String
  date_gte: String
  date_contains: String
  date_not_contains: String
  date_starts_with: String
  date_not_starts_with: String
  date_ends_with: String
  date_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  AND: [ActualityWhereInput!]
  OR: [ActualityWhereInput!]
  NOT: [ActualityWhereInput!]
}

input ActualityWhereUniqueInput {
  id: ID
}

type AggregateActuality {
  count: Int!
}

type AggregateBooking {
  count: Int!
}

type AggregateContact {
  count: Int!
}

type AggregateFaq {
  count: Int!
}

type AggregateLocation {
  count: Int!
}

type AggregateRoom {
  count: Int!
}

type AggregateSchedule {
  count: Int!
}

type AggregateStage {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Booking {
  id: ID!
  idBooking: Int!
  title: String!
  allDay: Boolean!
  start: String!
  end: String!
  type: String!
  room: String!
  is_paid: Boolean!
  createdAt: DateTime!
  userId: User!
}

type BookingConnection {
  pageInfo: PageInfo!
  edges: [BookingEdge]!
  aggregate: AggregateBooking!
}

input BookingCreateInput {
  id: ID
  idBooking: Int!
  title: String!
  allDay: Boolean!
  start: String!
  end: String!
  type: String!
  room: String!
  is_paid: Boolean!
  userId: UserCreateOneInput!
}

type BookingEdge {
  node: Booking!
  cursor: String!
}

enum BookingOrderByInput {
  id_ASC
  id_DESC
  idBooking_ASC
  idBooking_DESC
  title_ASC
  title_DESC
  allDay_ASC
  allDay_DESC
  start_ASC
  start_DESC
  end_ASC
  end_DESC
  type_ASC
  type_DESC
  room_ASC
  room_DESC
  is_paid_ASC
  is_paid_DESC
  createdAt_ASC
  createdAt_DESC
}

type BookingPreviousValues {
  id: ID!
  idBooking: Int!
  title: String!
  allDay: Boolean!
  start: String!
  end: String!
  type: String!
  room: String!
  is_paid: Boolean!
  createdAt: DateTime!
}

type BookingSubscriptionPayload {
  mutation: MutationType!
  node: Booking
  updatedFields: [String!]
  previousValues: BookingPreviousValues
}

input BookingSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BookingWhereInput
  AND: [BookingSubscriptionWhereInput!]
  OR: [BookingSubscriptionWhereInput!]
  NOT: [BookingSubscriptionWhereInput!]
}

input BookingUpdateInput {
  idBooking: Int
  title: String
  allDay: Boolean
  start: String
  end: String
  type: String
  room: String
  is_paid: Boolean
  userId: UserUpdateOneRequiredInput
}

input BookingUpdateManyMutationInput {
  idBooking: Int
  title: String
  allDay: Boolean
  start: String
  end: String
  type: String
  room: String
  is_paid: Boolean
}

input BookingWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  idBooking: Int
  idBooking_not: Int
  idBooking_in: [Int!]
  idBooking_not_in: [Int!]
  idBooking_lt: Int
  idBooking_lte: Int
  idBooking_gt: Int
  idBooking_gte: Int
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  allDay: Boolean
  allDay_not: Boolean
  start: String
  start_not: String
  start_in: [String!]
  start_not_in: [String!]
  start_lt: String
  start_lte: String
  start_gt: String
  start_gte: String
  start_contains: String
  start_not_contains: String
  start_starts_with: String
  start_not_starts_with: String
  start_ends_with: String
  start_not_ends_with: String
  end: String
  end_not: String
  end_in: [String!]
  end_not_in: [String!]
  end_lt: String
  end_lte: String
  end_gt: String
  end_gte: String
  end_contains: String
  end_not_contains: String
  end_starts_with: String
  end_not_starts_with: String
  end_ends_with: String
  end_not_ends_with: String
  type: String
  type_not: String
  type_in: [String!]
  type_not_in: [String!]
  type_lt: String
  type_lte: String
  type_gt: String
  type_gte: String
  type_contains: String
  type_not_contains: String
  type_starts_with: String
  type_not_starts_with: String
  type_ends_with: String
  type_not_ends_with: String
  room: String
  room_not: String
  room_in: [String!]
  room_not_in: [String!]
  room_lt: String
  room_lte: String
  room_gt: String
  room_gte: String
  room_contains: String
  room_not_contains: String
  room_starts_with: String
  room_not_starts_with: String
  room_ends_with: String
  room_not_ends_with: String
  is_paid: Boolean
  is_paid_not: Boolean
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  userId: UserWhereInput
  AND: [BookingWhereInput!]
  OR: [BookingWhereInput!]
  NOT: [BookingWhereInput!]
}

input BookingWhereUniqueInput {
  id: ID
  idBooking: Int
}

type Contact {
  id: ID!
  adress: String!
  fix: String!
  phone: String!
  fax: String!
  mail: String!
  memberOne: String!
  memberTwo: String!
}

type ContactConnection {
  pageInfo: PageInfo!
  edges: [ContactEdge]!
  aggregate: AggregateContact!
}

input ContactCreateInput {
  id: ID
  adress: String!
  fix: String!
  phone: String!
  fax: String!
  mail: String!
  memberOne: String!
  memberTwo: String!
}

type ContactEdge {
  node: Contact!
  cursor: String!
}

enum ContactOrderByInput {
  id_ASC
  id_DESC
  adress_ASC
  adress_DESC
  fix_ASC
  fix_DESC
  phone_ASC
  phone_DESC
  fax_ASC
  fax_DESC
  mail_ASC
  mail_DESC
  memberOne_ASC
  memberOne_DESC
  memberTwo_ASC
  memberTwo_DESC
}

type ContactPreviousValues {
  id: ID!
  adress: String!
  fix: String!
  phone: String!
  fax: String!
  mail: String!
  memberOne: String!
  memberTwo: String!
}

type ContactSubscriptionPayload {
  mutation: MutationType!
  node: Contact
  updatedFields: [String!]
  previousValues: ContactPreviousValues
}

input ContactSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ContactWhereInput
  AND: [ContactSubscriptionWhereInput!]
  OR: [ContactSubscriptionWhereInput!]
  NOT: [ContactSubscriptionWhereInput!]
}

input ContactUpdateInput {
  adress: String
  fix: String
  phone: String
  fax: String
  mail: String
  memberOne: String
  memberTwo: String
}

input ContactUpdateManyMutationInput {
  adress: String
  fix: String
  phone: String
  fax: String
  mail: String
  memberOne: String
  memberTwo: String
}

input ContactWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  adress: String
  adress_not: String
  adress_in: [String!]
  adress_not_in: [String!]
  adress_lt: String
  adress_lte: String
  adress_gt: String
  adress_gte: String
  adress_contains: String
  adress_not_contains: String
  adress_starts_with: String
  adress_not_starts_with: String
  adress_ends_with: String
  adress_not_ends_with: String
  fix: String
  fix_not: String
  fix_in: [String!]
  fix_not_in: [String!]
  fix_lt: String
  fix_lte: String
  fix_gt: String
  fix_gte: String
  fix_contains: String
  fix_not_contains: String
  fix_starts_with: String
  fix_not_starts_with: String
  fix_ends_with: String
  fix_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  fax: String
  fax_not: String
  fax_in: [String!]
  fax_not_in: [String!]
  fax_lt: String
  fax_lte: String
  fax_gt: String
  fax_gte: String
  fax_contains: String
  fax_not_contains: String
  fax_starts_with: String
  fax_not_starts_with: String
  fax_ends_with: String
  fax_not_ends_with: String
  mail: String
  mail_not: String
  mail_in: [String!]
  mail_not_in: [String!]
  mail_lt: String
  mail_lte: String
  mail_gt: String
  mail_gte: String
  mail_contains: String
  mail_not_contains: String
  mail_starts_with: String
  mail_not_starts_with: String
  mail_ends_with: String
  mail_not_ends_with: String
  memberOne: String
  memberOne_not: String
  memberOne_in: [String!]
  memberOne_not_in: [String!]
  memberOne_lt: String
  memberOne_lte: String
  memberOne_gt: String
  memberOne_gte: String
  memberOne_contains: String
  memberOne_not_contains: String
  memberOne_starts_with: String
  memberOne_not_starts_with: String
  memberOne_ends_with: String
  memberOne_not_ends_with: String
  memberTwo: String
  memberTwo_not: String
  memberTwo_in: [String!]
  memberTwo_not_in: [String!]
  memberTwo_lt: String
  memberTwo_lte: String
  memberTwo_gt: String
  memberTwo_gte: String
  memberTwo_contains: String
  memberTwo_not_contains: String
  memberTwo_starts_with: String
  memberTwo_not_starts_with: String
  memberTwo_ends_with: String
  memberTwo_not_ends_with: String
  AND: [ContactWhereInput!]
  OR: [ContactWhereInput!]
  NOT: [ContactWhereInput!]
}

input ContactWhereUniqueInput {
  id: ID
}

scalar DateTime

type Faq {
  id: ID!
  question: String!
  date: String!
  answer: String!
}

type FaqConnection {
  pageInfo: PageInfo!
  edges: [FaqEdge]!
  aggregate: AggregateFaq!
}

input FaqCreateInput {
  id: ID
  question: String!
  date: String!
  answer: String!
}

type FaqEdge {
  node: Faq!
  cursor: String!
}

enum FaqOrderByInput {
  id_ASC
  id_DESC
  question_ASC
  question_DESC
  date_ASC
  date_DESC
  answer_ASC
  answer_DESC
}

type FaqPreviousValues {
  id: ID!
  question: String!
  date: String!
  answer: String!
}

type FaqSubscriptionPayload {
  mutation: MutationType!
  node: Faq
  updatedFields: [String!]
  previousValues: FaqPreviousValues
}

input FaqSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FaqWhereInput
  AND: [FaqSubscriptionWhereInput!]
  OR: [FaqSubscriptionWhereInput!]
  NOT: [FaqSubscriptionWhereInput!]
}

input FaqUpdateInput {
  question: String
  date: String
  answer: String
}

input FaqUpdateManyMutationInput {
  question: String
  date: String
  answer: String
}

input FaqWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  question: String
  question_not: String
  question_in: [String!]
  question_not_in: [String!]
  question_lt: String
  question_lte: String
  question_gt: String
  question_gte: String
  question_contains: String
  question_not_contains: String
  question_starts_with: String
  question_not_starts_with: String
  question_ends_with: String
  question_not_ends_with: String
  date: String
  date_not: String
  date_in: [String!]
  date_not_in: [String!]
  date_lt: String
  date_lte: String
  date_gt: String
  date_gte: String
  date_contains: String
  date_not_contains: String
  date_starts_with: String
  date_not_starts_with: String
  date_ends_with: String
  date_not_ends_with: String
  answer: String
  answer_not: String
  answer_in: [String!]
  answer_not_in: [String!]
  answer_lt: String
  answer_lte: String
  answer_gt: String
  answer_gte: String
  answer_contains: String
  answer_not_contains: String
  answer_starts_with: String
  answer_not_starts_with: String
  answer_ends_with: String
  answer_not_ends_with: String
  AND: [FaqWhereInput!]
  OR: [FaqWhereInput!]
  NOT: [FaqWhereInput!]
}

input FaqWhereUniqueInput {
  id: ID
}

type Location {
  id: ID!
  sport: String!
  hour: String!
  day: String!
  roomName: Room!
  userId: User!
  is_paid: Boolean!
  uniqueLocationsRoomHourDay: String!
  createdAt: DateTime!
}

type LocationConnection {
  pageInfo: PageInfo!
  edges: [LocationEdge]!
  aggregate: AggregateLocation!
}

input LocationCreateInput {
  id: ID
  sport: String!
  hour: String!
  day: String!
  roomName: RoomCreateOneInput!
  userId: UserCreateOneInput!
  is_paid: Boolean
  uniqueLocationsRoomHourDay: String!
}

type LocationEdge {
  node: Location!
  cursor: String!
}

enum LocationOrderByInput {
  id_ASC
  id_DESC
  sport_ASC
  sport_DESC
  hour_ASC
  hour_DESC
  day_ASC
  day_DESC
  is_paid_ASC
  is_paid_DESC
  uniqueLocationsRoomHourDay_ASC
  uniqueLocationsRoomHourDay_DESC
  createdAt_ASC
  createdAt_DESC
}

type LocationPreviousValues {
  id: ID!
  sport: String!
  hour: String!
  day: String!
  is_paid: Boolean!
  uniqueLocationsRoomHourDay: String!
  createdAt: DateTime!
}

type LocationSubscriptionPayload {
  mutation: MutationType!
  node: Location
  updatedFields: [String!]
  previousValues: LocationPreviousValues
}

input LocationSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LocationWhereInput
  AND: [LocationSubscriptionWhereInput!]
  OR: [LocationSubscriptionWhereInput!]
  NOT: [LocationSubscriptionWhereInput!]
}

input LocationUpdateInput {
  sport: String
  hour: String
  day: String
  roomName: RoomUpdateOneRequiredInput
  userId: UserUpdateOneRequiredInput
  is_paid: Boolean
  uniqueLocationsRoomHourDay: String
}

input LocationUpdateManyMutationInput {
  sport: String
  hour: String
  day: String
  is_paid: Boolean
  uniqueLocationsRoomHourDay: String
}

input LocationWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  sport: String
  sport_not: String
  sport_in: [String!]
  sport_not_in: [String!]
  sport_lt: String
  sport_lte: String
  sport_gt: String
  sport_gte: String
  sport_contains: String
  sport_not_contains: String
  sport_starts_with: String
  sport_not_starts_with: String
  sport_ends_with: String
  sport_not_ends_with: String
  hour: String
  hour_not: String
  hour_in: [String!]
  hour_not_in: [String!]
  hour_lt: String
  hour_lte: String
  hour_gt: String
  hour_gte: String
  hour_contains: String
  hour_not_contains: String
  hour_starts_with: String
  hour_not_starts_with: String
  hour_ends_with: String
  hour_not_ends_with: String
  day: String
  day_not: String
  day_in: [String!]
  day_not_in: [String!]
  day_lt: String
  day_lte: String
  day_gt: String
  day_gte: String
  day_contains: String
  day_not_contains: String
  day_starts_with: String
  day_not_starts_with: String
  day_ends_with: String
  day_not_ends_with: String
  roomName: RoomWhereInput
  userId: UserWhereInput
  is_paid: Boolean
  is_paid_not: Boolean
  uniqueLocationsRoomHourDay: String
  uniqueLocationsRoomHourDay_not: String
  uniqueLocationsRoomHourDay_in: [String!]
  uniqueLocationsRoomHourDay_not_in: [String!]
  uniqueLocationsRoomHourDay_lt: String
  uniqueLocationsRoomHourDay_lte: String
  uniqueLocationsRoomHourDay_gt: String
  uniqueLocationsRoomHourDay_gte: String
  uniqueLocationsRoomHourDay_contains: String
  uniqueLocationsRoomHourDay_not_contains: String
  uniqueLocationsRoomHourDay_starts_with: String
  uniqueLocationsRoomHourDay_not_starts_with: String
  uniqueLocationsRoomHourDay_ends_with: String
  uniqueLocationsRoomHourDay_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [LocationWhereInput!]
  OR: [LocationWhereInput!]
  NOT: [LocationWhereInput!]
}

input LocationWhereUniqueInput {
  id: ID
  uniqueLocationsRoomHourDay: String
}

scalar Long

type Mutation {
  createActuality(data: ActualityCreateInput!): Actuality!
  updateActuality(data: ActualityUpdateInput!, where: ActualityWhereUniqueInput!): Actuality
  updateManyActualities(data: ActualityUpdateManyMutationInput!, where: ActualityWhereInput): BatchPayload!
  upsertActuality(where: ActualityWhereUniqueInput!, create: ActualityCreateInput!, update: ActualityUpdateInput!): Actuality!
  deleteActuality(where: ActualityWhereUniqueInput!): Actuality
  deleteManyActualities(where: ActualityWhereInput): BatchPayload!
  createBooking(data: BookingCreateInput!): Booking!
  updateBooking(data: BookingUpdateInput!, where: BookingWhereUniqueInput!): Booking
  updateManyBookings(data: BookingUpdateManyMutationInput!, where: BookingWhereInput): BatchPayload!
  upsertBooking(where: BookingWhereUniqueInput!, create: BookingCreateInput!, update: BookingUpdateInput!): Booking!
  deleteBooking(where: BookingWhereUniqueInput!): Booking
  deleteManyBookings(where: BookingWhereInput): BatchPayload!
  createContact(data: ContactCreateInput!): Contact!
  updateContact(data: ContactUpdateInput!, where: ContactWhereUniqueInput!): Contact
  updateManyContacts(data: ContactUpdateManyMutationInput!, where: ContactWhereInput): BatchPayload!
  upsertContact(where: ContactWhereUniqueInput!, create: ContactCreateInput!, update: ContactUpdateInput!): Contact!
  deleteContact(where: ContactWhereUniqueInput!): Contact
  deleteManyContacts(where: ContactWhereInput): BatchPayload!
  createFaq(data: FaqCreateInput!): Faq!
  updateFaq(data: FaqUpdateInput!, where: FaqWhereUniqueInput!): Faq
  updateManyFaqs(data: FaqUpdateManyMutationInput!, where: FaqWhereInput): BatchPayload!
  upsertFaq(where: FaqWhereUniqueInput!, create: FaqCreateInput!, update: FaqUpdateInput!): Faq!
  deleteFaq(where: FaqWhereUniqueInput!): Faq
  deleteManyFaqs(where: FaqWhereInput): BatchPayload!
  createLocation(data: LocationCreateInput!): Location!
  updateLocation(data: LocationUpdateInput!, where: LocationWhereUniqueInput!): Location
  updateManyLocations(data: LocationUpdateManyMutationInput!, where: LocationWhereInput): BatchPayload!
  upsertLocation(where: LocationWhereUniqueInput!, create: LocationCreateInput!, update: LocationUpdateInput!): Location!
  deleteLocation(where: LocationWhereUniqueInput!): Location
  deleteManyLocations(where: LocationWhereInput): BatchPayload!
  createRoom(data: RoomCreateInput!): Room!
  updateRoom(data: RoomUpdateInput!, where: RoomWhereUniqueInput!): Room
  updateManyRooms(data: RoomUpdateManyMutationInput!, where: RoomWhereInput): BatchPayload!
  upsertRoom(where: RoomWhereUniqueInput!, create: RoomCreateInput!, update: RoomUpdateInput!): Room!
  deleteRoom(where: RoomWhereUniqueInput!): Room
  deleteManyRooms(where: RoomWhereInput): BatchPayload!
  createSchedule(data: ScheduleCreateInput!): Schedule!
  updateSchedule(data: ScheduleUpdateInput!, where: ScheduleWhereUniqueInput!): Schedule
  updateManySchedules(data: ScheduleUpdateManyMutationInput!, where: ScheduleWhereInput): BatchPayload!
  upsertSchedule(where: ScheduleWhereUniqueInput!, create: ScheduleCreateInput!, update: ScheduleUpdateInput!): Schedule!
  deleteSchedule(where: ScheduleWhereUniqueInput!): Schedule
  deleteManySchedules(where: ScheduleWhereInput): BatchPayload!
  createStage(data: StageCreateInput!): Stage!
  updateStage(data: StageUpdateInput!, where: StageWhereUniqueInput!): Stage
  updateManyStages(data: StageUpdateManyMutationInput!, where: StageWhereInput): BatchPayload!
  upsertStage(where: StageWhereUniqueInput!, create: StageCreateInput!, update: StageUpdateInput!): Stage!
  deleteStage(where: StageWhereUniqueInput!): Stage
  deleteManyStages(where: StageWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

enum Permission {
  SADMIN
  ADMIN
  USER
}

type Query {
  actuality(where: ActualityWhereUniqueInput!): Actuality
  actualities(where: ActualityWhereInput, orderBy: ActualityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Actuality]!
  actualitiesConnection(where: ActualityWhereInput, orderBy: ActualityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ActualityConnection!
  booking(where: BookingWhereUniqueInput!): Booking
  bookings(where: BookingWhereInput, orderBy: BookingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Booking]!
  bookingsConnection(where: BookingWhereInput, orderBy: BookingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BookingConnection!
  contact(where: ContactWhereUniqueInput!): Contact
  contacts(where: ContactWhereInput, orderBy: ContactOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Contact]!
  contactsConnection(where: ContactWhereInput, orderBy: ContactOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ContactConnection!
  faq(where: FaqWhereUniqueInput!): Faq
  faqs(where: FaqWhereInput, orderBy: FaqOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Faq]!
  faqsConnection(where: FaqWhereInput, orderBy: FaqOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FaqConnection!
  location(where: LocationWhereUniqueInput!): Location
  locations(where: LocationWhereInput, orderBy: LocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Location]!
  locationsConnection(where: LocationWhereInput, orderBy: LocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LocationConnection!
  room(where: RoomWhereUniqueInput!): Room
  rooms(where: RoomWhereInput, orderBy: RoomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Room]!
  roomsConnection(where: RoomWhereInput, orderBy: RoomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RoomConnection!
  schedule(where: ScheduleWhereUniqueInput!): Schedule
  schedules(where: ScheduleWhereInput, orderBy: ScheduleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Schedule]!
  schedulesConnection(where: ScheduleWhereInput, orderBy: ScheduleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ScheduleConnection!
  stage(where: StageWhereUniqueInput!): Stage
  stages(where: StageWhereInput, orderBy: StageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Stage]!
  stagesConnection(where: StageWhereInput, orderBy: StageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StageConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Room {
  id: ID!
  name: String!
  price: Float!
  sport: String!
  uniqueNameSport: String!
}

type RoomConnection {
  pageInfo: PageInfo!
  edges: [RoomEdge]!
  aggregate: AggregateRoom!
}

input RoomCreateInput {
  id: ID
  name: String!
  price: Float!
  sport: String!
  uniqueNameSport: String!
}

input RoomCreateOneInput {
  create: RoomCreateInput
  connect: RoomWhereUniqueInput
}

type RoomEdge {
  node: Room!
  cursor: String!
}

enum RoomOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  price_ASC
  price_DESC
  sport_ASC
  sport_DESC
  uniqueNameSport_ASC
  uniqueNameSport_DESC
}

type RoomPreviousValues {
  id: ID!
  name: String!
  price: Float!
  sport: String!
  uniqueNameSport: String!
}

type RoomSubscriptionPayload {
  mutation: MutationType!
  node: Room
  updatedFields: [String!]
  previousValues: RoomPreviousValues
}

input RoomSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RoomWhereInput
  AND: [RoomSubscriptionWhereInput!]
  OR: [RoomSubscriptionWhereInput!]
  NOT: [RoomSubscriptionWhereInput!]
}

input RoomUpdateDataInput {
  name: String
  price: Float
  sport: String
  uniqueNameSport: String
}

input RoomUpdateInput {
  name: String
  price: Float
  sport: String
  uniqueNameSport: String
}

input RoomUpdateManyMutationInput {
  name: String
  price: Float
  sport: String
  uniqueNameSport: String
}

input RoomUpdateOneRequiredInput {
  create: RoomCreateInput
  update: RoomUpdateDataInput
  upsert: RoomUpsertNestedInput
  connect: RoomWhereUniqueInput
}

input RoomUpsertNestedInput {
  update: RoomUpdateDataInput!
  create: RoomCreateInput!
}

input RoomWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  sport: String
  sport_not: String
  sport_in: [String!]
  sport_not_in: [String!]
  sport_lt: String
  sport_lte: String
  sport_gt: String
  sport_gte: String
  sport_contains: String
  sport_not_contains: String
  sport_starts_with: String
  sport_not_starts_with: String
  sport_ends_with: String
  sport_not_ends_with: String
  uniqueNameSport: String
  uniqueNameSport_not: String
  uniqueNameSport_in: [String!]
  uniqueNameSport_not_in: [String!]
  uniqueNameSport_lt: String
  uniqueNameSport_lte: String
  uniqueNameSport_gt: String
  uniqueNameSport_gte: String
  uniqueNameSport_contains: String
  uniqueNameSport_not_contains: String
  uniqueNameSport_starts_with: String
  uniqueNameSport_not_starts_with: String
  uniqueNameSport_ends_with: String
  uniqueNameSport_not_ends_with: String
  AND: [RoomWhereInput!]
  OR: [RoomWhereInput!]
  NOT: [RoomWhereInput!]
}

input RoomWhereUniqueInput {
  id: ID
  uniqueNameSport: String
}

type Schedule {
  id: ID!
  lundi: String!
  mardi: String!
  mercredi: String!
  jeudi: String!
  vendredi: String!
  samedi: String!
  dimanche: String!
  vacances: String!
}

type ScheduleConnection {
  pageInfo: PageInfo!
  edges: [ScheduleEdge]!
  aggregate: AggregateSchedule!
}

input ScheduleCreateInput {
  id: ID
  lundi: String!
  mardi: String!
  mercredi: String!
  jeudi: String!
  vendredi: String!
  samedi: String!
  dimanche: String!
  vacances: String!
}

type ScheduleEdge {
  node: Schedule!
  cursor: String!
}

enum ScheduleOrderByInput {
  id_ASC
  id_DESC
  lundi_ASC
  lundi_DESC
  mardi_ASC
  mardi_DESC
  mercredi_ASC
  mercredi_DESC
  jeudi_ASC
  jeudi_DESC
  vendredi_ASC
  vendredi_DESC
  samedi_ASC
  samedi_DESC
  dimanche_ASC
  dimanche_DESC
  vacances_ASC
  vacances_DESC
}

type SchedulePreviousValues {
  id: ID!
  lundi: String!
  mardi: String!
  mercredi: String!
  jeudi: String!
  vendredi: String!
  samedi: String!
  dimanche: String!
  vacances: String!
}

type ScheduleSubscriptionPayload {
  mutation: MutationType!
  node: Schedule
  updatedFields: [String!]
  previousValues: SchedulePreviousValues
}

input ScheduleSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ScheduleWhereInput
  AND: [ScheduleSubscriptionWhereInput!]
  OR: [ScheduleSubscriptionWhereInput!]
  NOT: [ScheduleSubscriptionWhereInput!]
}

input ScheduleUpdateInput {
  lundi: String
  mardi: String
  mercredi: String
  jeudi: String
  vendredi: String
  samedi: String
  dimanche: String
  vacances: String
}

input ScheduleUpdateManyMutationInput {
  lundi: String
  mardi: String
  mercredi: String
  jeudi: String
  vendredi: String
  samedi: String
  dimanche: String
  vacances: String
}

input ScheduleWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  lundi: String
  lundi_not: String
  lundi_in: [String!]
  lundi_not_in: [String!]
  lundi_lt: String
  lundi_lte: String
  lundi_gt: String
  lundi_gte: String
  lundi_contains: String
  lundi_not_contains: String
  lundi_starts_with: String
  lundi_not_starts_with: String
  lundi_ends_with: String
  lundi_not_ends_with: String
  mardi: String
  mardi_not: String
  mardi_in: [String!]
  mardi_not_in: [String!]
  mardi_lt: String
  mardi_lte: String
  mardi_gt: String
  mardi_gte: String
  mardi_contains: String
  mardi_not_contains: String
  mardi_starts_with: String
  mardi_not_starts_with: String
  mardi_ends_with: String
  mardi_not_ends_with: String
  mercredi: String
  mercredi_not: String
  mercredi_in: [String!]
  mercredi_not_in: [String!]
  mercredi_lt: String
  mercredi_lte: String
  mercredi_gt: String
  mercredi_gte: String
  mercredi_contains: String
  mercredi_not_contains: String
  mercredi_starts_with: String
  mercredi_not_starts_with: String
  mercredi_ends_with: String
  mercredi_not_ends_with: String
  jeudi: String
  jeudi_not: String
  jeudi_in: [String!]
  jeudi_not_in: [String!]
  jeudi_lt: String
  jeudi_lte: String
  jeudi_gt: String
  jeudi_gte: String
  jeudi_contains: String
  jeudi_not_contains: String
  jeudi_starts_with: String
  jeudi_not_starts_with: String
  jeudi_ends_with: String
  jeudi_not_ends_with: String
  vendredi: String
  vendredi_not: String
  vendredi_in: [String!]
  vendredi_not_in: [String!]
  vendredi_lt: String
  vendredi_lte: String
  vendredi_gt: String
  vendredi_gte: String
  vendredi_contains: String
  vendredi_not_contains: String
  vendredi_starts_with: String
  vendredi_not_starts_with: String
  vendredi_ends_with: String
  vendredi_not_ends_with: String
  samedi: String
  samedi_not: String
  samedi_in: [String!]
  samedi_not_in: [String!]
  samedi_lt: String
  samedi_lte: String
  samedi_gt: String
  samedi_gte: String
  samedi_contains: String
  samedi_not_contains: String
  samedi_starts_with: String
  samedi_not_starts_with: String
  samedi_ends_with: String
  samedi_not_ends_with: String
  dimanche: String
  dimanche_not: String
  dimanche_in: [String!]
  dimanche_not_in: [String!]
  dimanche_lt: String
  dimanche_lte: String
  dimanche_gt: String
  dimanche_gte: String
  dimanche_contains: String
  dimanche_not_contains: String
  dimanche_starts_with: String
  dimanche_not_starts_with: String
  dimanche_ends_with: String
  dimanche_not_ends_with: String
  vacances: String
  vacances_not: String
  vacances_in: [String!]
  vacances_not_in: [String!]
  vacances_lt: String
  vacances_lte: String
  vacances_gt: String
  vacances_gte: String
  vacances_contains: String
  vacances_not_contains: String
  vacances_starts_with: String
  vacances_not_starts_with: String
  vacances_ends_with: String
  vacances_not_ends_with: String
  AND: [ScheduleWhereInput!]
  OR: [ScheduleWhereInput!]
  NOT: [ScheduleWhereInput!]
}

input ScheduleWhereUniqueInput {
  id: ID
}

type Stage {
  id: ID!
  title: String!
  date: String!
  content: String!
}

type StageConnection {
  pageInfo: PageInfo!
  edges: [StageEdge]!
  aggregate: AggregateStage!
}

input StageCreateInput {
  id: ID
  title: String!
  date: String!
  content: String!
}

type StageEdge {
  node: Stage!
  cursor: String!
}

enum StageOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  date_ASC
  date_DESC
  content_ASC
  content_DESC
}

type StagePreviousValues {
  id: ID!
  title: String!
  date: String!
  content: String!
}

type StageSubscriptionPayload {
  mutation: MutationType!
  node: Stage
  updatedFields: [String!]
  previousValues: StagePreviousValues
}

input StageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: StageWhereInput
  AND: [StageSubscriptionWhereInput!]
  OR: [StageSubscriptionWhereInput!]
  NOT: [StageSubscriptionWhereInput!]
}

input StageUpdateInput {
  title: String
  date: String
  content: String
}

input StageUpdateManyMutationInput {
  title: String
  date: String
  content: String
}

input StageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  date: String
  date_not: String
  date_in: [String!]
  date_not_in: [String!]
  date_lt: String
  date_lte: String
  date_gt: String
  date_gte: String
  date_contains: String
  date_not_contains: String
  date_starts_with: String
  date_not_starts_with: String
  date_ends_with: String
  date_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  AND: [StageWhereInput!]
  OR: [StageWhereInput!]
  NOT: [StageWhereInput!]
}

input StageWhereUniqueInput {
  id: ID
}

type Subscription {
  actuality(where: ActualitySubscriptionWhereInput): ActualitySubscriptionPayload
  booking(where: BookingSubscriptionWhereInput): BookingSubscriptionPayload
  contact(where: ContactSubscriptionWhereInput): ContactSubscriptionPayload
  faq(where: FaqSubscriptionWhereInput): FaqSubscriptionPayload
  location(where: LocationSubscriptionWhereInput): LocationSubscriptionPayload
  room(where: RoomSubscriptionWhereInput): RoomSubscriptionPayload
  schedule(where: ScheduleSubscriptionWhereInput): ScheduleSubscriptionPayload
  stage(where: StageSubscriptionWhereInput): StageSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  surname: String!
  password: String!
  email: String!
  adress: String!
  city: String!
  has_bill: Boolean!
  createdAt: DateTime!
  resetToken: String
  resetTokenExpiry: Float
  permissions: [Permission!]!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  surname: String!
  password: String!
  email: String!
  adress: String!
  city: String!
  has_bill: Boolean
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserCreatepermissionsInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreatepermissionsInput {
  set: [Permission!]
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  surname_ASC
  surname_DESC
  password_ASC
  password_DESC
  email_ASC
  email_DESC
  adress_ASC
  adress_DESC
  city_ASC
  city_DESC
  has_bill_ASC
  has_bill_DESC
  createdAt_ASC
  createdAt_DESC
  resetToken_ASC
  resetToken_DESC
  resetTokenExpiry_ASC
  resetTokenExpiry_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  surname: String!
  password: String!
  email: String!
  adress: String!
  city: String!
  has_bill: Boolean!
  createdAt: DateTime!
  resetToken: String
  resetTokenExpiry: Float
  permissions: [Permission!]!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  name: String
  surname: String
  password: String
  email: String
  adress: String
  city: String
  has_bill: Boolean
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
}

input UserUpdateInput {
  name: String
  surname: String
  password: String
  email: String
  adress: String
  city: String
  has_bill: Boolean
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
}

input UserUpdateManyMutationInput {
  name: String
  surname: String
  password: String
  email: String
  adress: String
  city: String
  has_bill: Boolean
  resetToken: String
  resetTokenExpiry: Float
  permissions: UserUpdatepermissionsInput
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpdatepermissionsInput {
  set: [Permission!]
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  surname: String
  surname_not: String
  surname_in: [String!]
  surname_not_in: [String!]
  surname_lt: String
  surname_lte: String
  surname_gt: String
  surname_gte: String
  surname_contains: String
  surname_not_contains: String
  surname_starts_with: String
  surname_not_starts_with: String
  surname_ends_with: String
  surname_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  adress: String
  adress_not: String
  adress_in: [String!]
  adress_not_in: [String!]
  adress_lt: String
  adress_lte: String
  adress_gt: String
  adress_gte: String
  adress_contains: String
  adress_not_contains: String
  adress_starts_with: String
  adress_not_starts_with: String
  adress_ends_with: String
  adress_not_ends_with: String
  city: String
  city_not: String
  city_in: [String!]
  city_not_in: [String!]
  city_lt: String
  city_lte: String
  city_gt: String
  city_gte: String
  city_contains: String
  city_not_contains: String
  city_starts_with: String
  city_not_starts_with: String
  city_ends_with: String
  city_not_ends_with: String
  has_bill: Boolean
  has_bill_not: Boolean
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  resetToken: String
  resetToken_not: String
  resetToken_in: [String!]
  resetToken_not_in: [String!]
  resetToken_lt: String
  resetToken_lte: String
  resetToken_gt: String
  resetToken_gte: String
  resetToken_contains: String
  resetToken_not_contains: String
  resetToken_starts_with: String
  resetToken_not_starts_with: String
  resetToken_ends_with: String
  resetToken_not_ends_with: String
  resetTokenExpiry: Float
  resetTokenExpiry_not: Float
  resetTokenExpiry_in: [Float!]
  resetTokenExpiry_not_in: [Float!]
  resetTokenExpiry_lt: Float
  resetTokenExpiry_lte: Float
  resetTokenExpiry_gt: Float
  resetTokenExpiry_gte: Float
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
